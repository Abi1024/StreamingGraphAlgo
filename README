Completed tasks:
- replace the trivial hash function with xxhash.
- rewrite code to determine whether an index belongs in a bucket
- add in c code: note that p must be prime and larger than poly(n) = n^2
- write code to guess mu (/ phi) instead of assuming it
- make the code modular
- making different sketches combinable

Tasks to be done:
- script that installs everything in one go and runs all the tests
- making sure each sketch (log^2 collection of buckets) is only ever sampled from ONCE <== add bit to sketch object to test whether sketch has been sampled
- testing output correctness and distribution uniformity.
- testing memory usage 
- some amount of optimization
- find 3rd party efficient + thoroughly tested implementation of modular exponentation
- Use correct types to achieve platform independence

Things to think about down the road:
- Miller-Rabin vs Fermat vs AKS (for primality testing)? Currently using AKS
- The c variable for each bucket seems inefficient to compute, since you need to compute r^i, where i = O(N)
- Can the algorithm ever return a false positive (i.e. an index whose entry is actually zero)? If so, is the probability of this affected by the guessing of phi (the number of nonzero entries?
- Which streaming library are we comparing our work to? Consider looking into Spark or Flink
